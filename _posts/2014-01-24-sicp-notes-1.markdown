---
layout:	post
title:	"Structure and Interpretation of Computer Programs notes I"
date:	2014-01-24
---
# environment:
There are multiple List dialects. The one used in this book is Scheme:
{% highlight Bash %}
sudo apt-get install mit-scheme
{% endhighlight %}
Then run "mit-scheme" in the shell.

I also installed Steel Bank Common Lisp:
{% highlight Bash %}
sudo apt-get install sbcl
{% endhighlight %}

Then run "sbcl" in the shell.

in "mit-scheme", if you type something by mistake, or the expression is
invalid, We will enter "Error system", like:
2 error>

To jump out of Error system, input (RESTART x) x is the option number 

# Chapter 1 Building Abstractions with Procedures
## 1. define variables
{% highlight Scheme %}
(define size 2)
{% endhighlight %}
## 2. define functions
{% highlight Scheme %}
(define (square x) (* x x))
{% endhighlight %}
## 3. condition expression
{% highlight Scheme %}
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))

(define (abs x)
  (cond ((< x 0) (- x))
  	(else x)))

(define (abs x)
  (if (< x 0)
      (- x)
      x))

(define (>= x y)
  (or (> x y) (= x y)))
or alternative as
(define (>= x y)
  (not (< x y)))
{% endhighlight %}
## 4. Newton's method to get square root
Whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess by average y with x/y.
{% highlight Scheme %}
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
	guess
    	(sqrt-iter (improve guess x) x)
  ))

(define (improve guess x)
	(average guess (/ x guess)))

(define (average x y)
	(/ (+ x y) 2))

(define (good-enough? guess x)
	(< (abs (- (square guess) x)) 0.001)) 

(define (mysqrt x)
	(sqrt-iter 1.0 x))
{% endhighlight %}

## 5. Internal definitions and block structure
{% highlight Scheme %}
(define (sqrt x)
	(define (good-enough? guess)
		(< (abs (- (square guess) x)) 0.001))
	(define (improve guess)
		(average guess (/ x guess)))
	(define (sqrt-iter guess)
		(if (good-enough? guess)
			guess
			(sqrt-iter (improve guess))))
	(sqrt-iter 1.0))
{% endhighlight %}
It is not necessary to pass x explicitly to each of these procedures. Instead, we allow x to be a free variable in the internal definitions.
This discipline is called lexical scoping.

## 6. Linear Recursion and Iteration
Linear Recursion:
{% highlight Scheme %}
(define (factorial n)
	(if (= n 1)
		1
		(* n (factorial (- n 1)))))
{% endhighlight %}

Linear Iterative:
{% highlight Scheme %}
(define (factorial n)
	(fact-iter 1 1 n))
(define (fact-iter product counter max-count)
	(if (> count max-count)
		product
		(fact-iter (* counter product)
			(+ counter 1)
			max-count)))
{% endhighlight %}

Difference: bottom-up vs. top-down
Linear iterative does not grow and shrink. At each step, all we need to keep track of, are the current value of the variables product, counter and max-count.

Scheme will execute an iterative process in constant space even if the iterative process is described by a recursive procedure. An implementation with this property is called tail-recursive.

## 7. How many different ways can we make change of $1.00
The number of ways to change amount a using n kinds of coins equals:
The number of ways to change amount a using all but the first kind of coins, plus
The number of ways to change amount a-d using all n kinds of coins, where d is the denomination of the first kind of coin
{% highlight Scheme %}
(define (count-change amount)
	(cc amount 5))
(define (cc amount kinds-of-coins)
	(cond ((= amount 0) 1)
	      ((or (< amount 0) (= kinds-of-coins 0)) 0)
	      (else (+ (cc amount (- kinds-of-coins 1))
	      		(cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))))  	
(define (first-denomination kinds-of-coins)
	(cond 	((= kinds-of-coins 1) 1)
		((= kinds-of-coins 2) 5)
		((= kinds-of-coins 3) 10)
		((= kinds-of-coins 4) 25)
		((= kinds-of-coins 5) 50)))
{% endhighlight %}

## 8. GCD and Fibonacci number
**Lame's Theorem**: If Euclid's Algorithm requires *k* steps to compute the GCD of some pair, then the smaller number in the pair must be greater than or equal to the *k*th Fibonacci number.

Let *n* be the smaller of the two inputs to the procedure. If the process takes *k* steps, then we must have $n\geq Fib(k) \approx \phi^{k}/\sqrt{5}$, Hence the order of growth is $\Theta(log n)$

$$gcd(F\_m, F\_n)=F\_{gcd(m,n)}$$  (*Concrete Mathematics*, 6.111)

## 9. the Fermat test
**Fermat's Little Theorem**: If *n* is a prime number and *a* is any positive integer less than *n*, then *a* raised the *n*th power is congruent to *a* modulo *n*.

**the Fermat test**: If *n* is not prime, then, in general, most of the number *a<n* will not satisfy the above relation. This leads to the following algorithm for testing primality: Given a number *n*, pick a random number *a<n* and compute the remainder of *a^n* modulo *n*. If the result is not equal to *a*, then *n* is certainly not prime. If it is *a*, then chances are good that *n* is prime. Now pick another random number *a* and test it with the same method. If it also satisfies the equation, then we can be even more confident that *n* is prime. By trying more and more values of *a*, we can increase our confidence in the result.

{% highlight Scheme %}
(define (expmod base exp m)
	(cond ((= exp 0) 1)
	      ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
	      (else (remainder (* base (expmod base (- exp 1) m)) m)))) 

(define (fermat-test n)
	(define (try-it a)
		(= (expmod a n n) a))
	(try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
	(cond ((= times 0) true)
	      ((fermat-test n) (fast-prime? n (- times 1)))
	      (else false)))
{% endhighlight %}

## 10. Higher-order Procedure
Procedures that can accept procedures as arguments or return procedures as values are called *high-order procedures*

## Exercise 1.1
10

12

8

3

ddd

19

false

4

16

6

16

## Exercise 1.2
{% highlight Scheme %}
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 3))))) (* 3 (- 6 2) (- 2 7)))
{% endhighlight %}
## Exercise 1.3
{% highlight Scheme %}
(define (f a b c)
	(define maxab (if (>= a b)
		      	a
			b)
	)
	(define minab (if (>= a b)
			b
			a)
	)
  
	(if (>= maxab c)
      		(if (>= c minab)
        		(+ (* maxab maxab) (* c c))
	  		(+ (* maxab maxab) (* minab minab))
      		)
      		(+ (* maxab maxab) (* c c))
  	)
)
{% endhighlight %}
## Exercise 1.6
maximum recursion depth exceeded
Since the else-clause is always executed in new-if.

## Exercise 1.8
{% highlight Scheme %}
(define (mycbrt x)
  	(cbrt-iter 1.0 x))

(define (cbrt-iter guess x)
	(if (cb-good-enough? guess x)
	  	guess
		(cbrt-iter (cbimprove guess x) x)))

(define (cb-good-enough? guess x)
  	(< (abs (- (* (* guess guess) guess) x)) 0.001))

(define (cbimprove guess x)
  	(/ (+ (/ x (* guess guess)) (* 2 guess)) 3))
{% endhighlight %}

## Exercise 1.10
1024

65536

65536

(f n) = 2n

(g n) = 2^n

(h n) = 2^(2^(2^(...)))

## Exercise 1.11
{% highlight Scheme %}
(define (f n)
  	(cond ((< n 3) n)
	      (else (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3)))))))

(define (f2 n)
  	(f-iter 2 1 0 2 n))
(define (f-iter a b c i count)
  	(cond ((< count 3) count)
		((= i count) a)
		(else (f-iter (+ a (* 2 b) (* 3 c)) a b (+ i 1) count))))
{% endhighlight %}

## Exercise 1.12
{% highlight Scheme %}
(define (pascal row idx)
  	(cond ((or (<= row 0) (<= idx 0) (< row idx)) 0)
	      ((= idx 1) 1)
	      ((= row idx) 1)
	      (else (+ (pascal (- row 1) (- idx 1)) (pascal (- row 1) idx)))))
{% endhighlight %}

## Exercise 1.13
define $\widehat{\phi}=(1-\sqrt{5})/2$, both $\phi$ and $\widehat{\phi}$ are the roots of the equation $x^2-x-1=0$, so we have ${\phi}^2={\phi}+1$; ${\widehat{\phi}}^2={\widehat{\phi}}+1$

Suppose $Fib(k)=({\phi}^{k}-{\widehat{\phi}}^{k})/{\sqrt{5}}$ for all the $k<n$, then, 

$$Fib(n)=Fib(n-1)+Fib(n-2)$$

$$Fib(n)=({\phi}^{n-1}-{\widehat{\phi}}^{n-1})/{\sqrt{5}}+({\phi}^{n-2}-{\widehat{\phi}}^{n-2})/{\sqrt{5}}$$

$$Fib(n)=({\phi}^{k-2}({\phi}+1)-{\widehat{\phi}}^{k-2}({\widehat{\phi}}+1))/{\sqrt{5}}$$

$$Fib(n)=({\phi}^{n}-{\widehat{\phi}}^{n})/{\sqrt{5}}$$

## Exercise 1.14

$$F(m,n)=F(m,n-1)+F(m-f(n),n)$$

There are at most n levels in its recursion tree, so there are at most 2^n leaf nodes. Time complexity O(m*2^n)  ??

## Exercise 1.15
$(12.15/3^n)<0.1$, n=5

O(log(a)))

## Exercise 1.16
{% highlight Scheme %}
(define (fast-expt b n)
  	(fast-expt-iter 1 b n))
(define (fast-expt-iter extra ret n)
  	(cond ((= n 1) (* extra ret))
	      ((= (remainder n 2) 0) (fast-expt-iter extra (* ret ret) (/ n 2)))
	      ((= (remainder n 2) 1) (fast-expt-iter (* extra ret) (* ret ret) (/ (- n 1) 2)))))
{% endhighlight %}

## Exercie 1.17
{% highlight Scheme %}
(define (times a b)
  	(cond ((= b 0) 0)
	      ((= (remainder b 2) 0) (times (double a) (halve b)))
	      ((= (remainder b 2) 1) (+ a (times (double a) (halve (- b 1)))))))
{% endhighlight %}

## Exercise 1.18
{% highlight Scheme %}
(define (times2 a b)
  	(times-iter 0 a b))
(define (times-iter ret a b)
  	(cond ((= b 0) ret)
	      ((even? b) (times-iter ret (double a) (halve b)))
	      (else (times-iter (+ ret a) a (- b 1))))) 
{% endhighlight %}

## Exercise 1.19
$a'=bq+aq+ap$, $b'=bp+aq$, $a''=b'q+a'q+a'p$, $b''=b'p+a'q$

so $a''=bq(q+2p)+aq(q+2p)+a(p^2+q^2)$, $b''=b(p^2+q^2)+aq(q+2p)$

so $p'=(p^2+q^2)$, $q'=q(q+2p)$

## Exercise 1.21
199

1999

7

## Exercise 1.22
{% highlight Scheme %}
(define (start-prime-test n start-time)
  	(if (prime? n)
	  	(report-prime n (- (runtime) start-time))
		0))

(define (report-prime n elapsed-time)
  	(newline)
  	(display n)
  	(display " *** ")
	(display elapsed-time)
	1)
(define (search-for-primes start count)
  	(if (< count 3)
	    (if (timed-prime-test start)
	      	(search-for-primes (+ start 1) (+ count 1))
		(search-for-primes (+ start 1) count))
	    0))
{% endhighlight %}
(wrong?)

## Exercise 1.23
{% highlight Scheme %}
(define (next n)
  	(if (= n 2) 3
	    (+ n 2)))

(define (smallest-divisor2 n)
  	(find-divisor2 n 2))
(define (find-divisor2 n test-divisor)
  	(cond ((> (square test-divisor) n) n)
	      ((divides? test-divisor n) test-divisor)
	      (else (find-divisor2 n (next test-divisor)))))
{% endhighlight %}

## Exercise 1.25
I think his solution is correct but slow. May cause overflow issue when base^exp is large

## Exercise 1.26
The procedure expmod will be executed twice using explicit multiplication, rather than once using *square*
