---
layout:	post
title:	"Structure and Interpretation of Computer Programs notes II"
date:	2014-04-13
---
# Chapter 2. Building Abstractions with Data

## 1. Pairs

{% highlight Scheme %}
(define x (cons 1 2))

(car x)
1

(cdr x)
2

(define x (cons 1 2))
(define y (cons 3 4))
(define z (cons x y))
(car (car z))
1
(car (cdr z))
3
{% endhighlight %}

## Exercise 2.1

{% highlight Scheme %}
(define (make-rat n d)
	(let ((nn (abs n))
	      (dd (abs d))
	      (g (gcd nn dd)))
	     (cond ((= (* n d) 0) (cons (n d)))
	           ((> (* n d) 0) (cons (/ nn g) (/ dd g)))
		   (else (cons (- (/ nn g)) (/ dd g))))))	
{% endhighlight %}
